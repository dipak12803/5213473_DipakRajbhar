import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'minimumBribes' function below.
     *
     * The function accepts INTEGER_ARRAY q as parameter.
     */

    public static void minimumBribes(List<Integer> q) {
    int n = q.size();
    int bribes = 0;

    for (int i = 0; i < n; i++) {
        int sticker = q.get(i);

        // check if someone has moved more than 2 steps forward
        if (sticker - (i + 1) > 2) {
            System.out.println("Too chaotic");
            return;
        }

        // check how many people with bigger sticker moved in front of current person
        // only need to check from (sticker-2) to current pos
        for (int j = Math.max(0, sticker - 2); j < i; j++) {
            if (q.get(j) > sticker) {
                bribes++;
            }
        }
    }

    System.out.println(bribes);
}


}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));

        int t = Integer.parseInt(bufferedReader.readLine().trim());

        IntStream.range(0, t).forEach(tItr -> {
            try {
                int n = Integer.parseInt(bufferedReader.readLine().trim());

                List<Integer> q = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
                    .map(Integer::parseInt)
                    .collect(toList());

                Result.minimumBribes(q);
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        });

        bufferedReader.close();
    }
}
