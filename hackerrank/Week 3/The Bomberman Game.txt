import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'bomberMan' function below.
     *
     * The function is expected to return a STRING_ARRAY.
     * The function accepts following parameters:
     *  1. INTEGER n
     *  2. STRING_ARRAY grid
     */

   public static List<String> bomberMan(int n, List<String> grid) {
    int r = grid.size();
    int c = grid.get(0).length();

    // case when only 1 sec passed, return original
    if (n == 1) return grid;

    // for all even seconds grid will be full of bombs
    if (n % 2 == 0) {
        List<String> full = new ArrayList<>();
        for (int i = 0; i < r; i++) {
            StringBuilder sb = new StringBuilder();
            for (int j = 0; j < c; j++) sb.append('O');
            full.add(sb.toString());
        }
        return full;
    }

    // explosion pattern
    List<String> afterFirst = explodeGrid(grid);

    // n%4==3 -> first explosion
    if (n % 4 == 3) return afterFirst;

    // else second explosion (n%4==1 case)
    return explodeGrid(afterFirst);
}

private static List<String> explodeGrid(List<String> grid) {
    int r = grid.size();
    int c = grid.get(0).length();
    char[][] arr = new char[r][c];

    // first fill with bombs
    for (int i = 0; i < r; i++) {
        for (int j = 0; j < c; j++) {
            arr[i][j] = 'O';
        }
    }

    // clear bombs and its neighbours
    for (int i = 0; i < r; i++) {
        for (int j = 0; j < c; j++) {
            if (grid.get(i).charAt(j) == 'O') {
                arr[i][j] = '.';
                if (i > 0) arr[i - 1][j] = '.';
                if (i < r - 1) arr[i + 1][j] = '.';
                if (j > 0) arr[i][j - 1] = '.';
                if (j < c - 1) arr[i][j + 1] = '.';
            }
        }
    }

    // convert back to list of strings
    List<String> result = new ArrayList<>();
    for (int i = 0; i < r; i++) {
        result.add(new String(arr[i]));
    }
    return result;
}


}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        String[] firstMultipleInput = bufferedReader.readLine().replaceAll("\\s+$", "").split(" ");

        int r = Integer.parseInt(firstMultipleInput[0]);

        int c = Integer.parseInt(firstMultipleInput[1]);

        int n = Integer.parseInt(firstMultipleInput[2]);

        List<String> grid = IntStream.range(0, r).mapToObj(i -> {
            try {
                return bufferedReader.readLine();
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        })
            .collect(toList());

        List<String> result = Result.bomberMan(n, grid);

        bufferedWriter.write(
            result.stream()
                .collect(joining("\n"))
            + "\n"
        );

        bufferedReader.close();
        bufferedWriter.close();
    }
}
